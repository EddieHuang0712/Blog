import{_ as t,r as p,o as e,c,a as s,b as n,d as o,e as l}from"./app-ca4cd4ff.js";const i={},u=l(`<h1 id="react-hook" tabindex="-1"><a class="header-anchor" href="#react-hook" aria-hidden="true">#</a> React Hook</h1><p>上篇文章中我们介绍了<code>React</code>中最常用也是最重要的两个<code>Hook</code>，<code>useState</code>以及<code>useEffect</code>，本次的文章我们将继续介绍<code>React</code>中常用的另外一个<code>Hook</code>——<code>useRef</code>。同时将<code>useRef</code>与<code>useState</code>进行对比，希望可以帮助大家更好地理解并使用钩子函数。</p><h2 id="useref-持久化引用" tabindex="-1"><a class="header-anchor" href="#useref-持久化引用" aria-hidden="true">#</a> useRef - 持久化引用</h2><h3 id="函数定义" tabindex="-1"><a class="header-anchor" href="#函数定义" aria-hidden="true">#</a> 函数定义</h3><p><code>useRef</code>是一个较为常用的钩子函数，用于在函数组件中创建一个可以存储和访问持久性数据的引用。它主要用于在组件中存储和获取<code>DOM</code>节点、保存上一个状态值等持久性数据。</p><p><code>useRef</code> 的用法和特点：</p><ul><li><strong>创建引用：</strong> 你可以使用 <code>useRef</code> 创建一个引用，并将其初始化为 <code>null</code> 或其他初始值。</li><li><strong>持久性数据存储：</strong> <code>useRef</code> 创建的引用可以在组件的整个生命周期中保持不变。每次组件重新渲染时，<code>useRef</code> 返回的引用都是相同的。</li><li><strong>不触发重新渲染：</strong> 与状态钩子不同，修改 <code>useRef</code> 创建的引用并不会触发组件的重新渲染。</li><li><strong>访问 DOM 节点：</strong> <code>useRef</code>最常见的用途之一是获取<code>DOM</code>元素的引用，用于执行<code>DOM</code>操作。</li></ul><h3 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例" aria-hidden="true">#</a> 使用示例</h3><p>下面是一个示例，展示了如何使用<code>useRef</code>来获取<code>DOM</code>节点的引用：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useRef<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">FocusInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> inputRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在组件挂载后，将输入框自动聚焦</span>
    inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">聚焦输入框</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">使用 useRef 示例</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FocusInput</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://eddiehuang.oss-cn-guangzhou.aliyuncs.com/images/useref1.gif" alt="useref1"></p><p>在这个示例中，<code>inputRef</code> 是一个引用，使用 <code>useRef(null)</code> 初始化。在 <code>useEffect</code> 中，当组件挂载后，<code>inputRef.current.focus()</code> 会自动聚焦输入框。同时，通过点击按钮也可以再次聚焦输入框。</p><p>此外你也可以通过<code>ref.current.style.xxx</code>来修改<code>DOM</code>节点的样式：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>useRef<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>  

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">const</span> divRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    
    <span class="token keyword">const</span> <span class="token function-variable function">changeColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  
        divRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> divRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">===</span> <span class="token string">&#39;lightblue&#39;</span><span class="token operator">?</span><span class="token string">&#39;white&#39;</span><span class="token operator">:</span><span class="token string">&#39;lightblue&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>  
  
    <span class="token keyword">return</span> <span class="token punctuation">(</span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>changeColor<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">改变背景颜色</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  
                <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>divRef<span class="token punctuation">}</span></span>  
                <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>  
                <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">&#39;200px&#39;</span><span class="token punctuation">,</span>  
                <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token string">&#39;200px&#39;</span><span class="token punctuation">,</span>  
                <span class="token punctuation">}</span><span class="token punctuation">}</span></span>  
            <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  
    <span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://eddiehuang.oss-cn-guangzhou.aliyuncs.com/images/useref2.gif" alt="useref2"></p><h3 id="useref与usestate的区别" tabindex="-1"><a class="header-anchor" href="#useref与usestate的区别" aria-hidden="true">#</a> useRef与useState的区别</h3><p>上篇文章中我们谈到了<code>useState</code>钩子函数，和本次的<code>useRef</code>一样，两者都可用于在函数组件中声明和管理数据，但它们的实际用途和作用却有些不同。下面是它们之间的主要区别：</p><ul><li><p><strong>触发重新渲染：</strong></p><ul><li><code>useState</code>：当使用 <code>useState</code> 来声明状态并通过对应的更新函数修改状态时，React 会自动识别状态变化，并重新渲染组件，以反映状态的变化。</li><li><code>useRef</code>：<code>useRef</code> 创建的引用变化不会触发组件的重新渲染，因为它主要用于存储数据和获取 DOM 节点引用，而不是用于触发渲染。</li></ul></li><li><p><strong>数据持久性：</strong></p><ul><li><code>useState</code>：状态变量是可变的，会随着组件的重新渲染而重新初始化，不具备持久性。</li><li><code>useRef</code>：引用变量是持久的，不会随着组件的重新渲染而重新初始化，可以用来存储需要在多次渲染之间保持一致的数据。</li></ul></li></ul><p>综上所述，<code>useState</code> 主要用于状态管理和触发组件的重新渲染，而<code>useRef</code>主要用于获取持久性的引用和操作 <code>DOM</code>，不触发组件的重新渲染。</p><p>在绝大多数情况下，推荐使用 <code>useState</code> 来管理组件的状态，这样可以更好地利用<code>React</code>的状态管理机制，保持代码的可维护性和可预测性。如果需要直接操作<code>DOM</code>，可以在特定情况下使用 <code>useRef</code>，但要小心绕过了<code>React</code>的控制，可能会导致代码难以追踪和维护。</p><h3 id="渲染机制" tabindex="-1"><a class="header-anchor" href="#渲染机制" aria-hidden="true">#</a> 渲染机制</h3><p>上面讲到了<code>useState</code>与<code>useRef</code>函数一个很大的区别就在于是否会触发组件的重新渲染。但如果只是修改<code>DOM</code>节点的样式，我们并不能分辨出两者的区别。下面我们将通过使用<code>useEffect</code>钩子函数来感受两者的区别。</p><p>使用<code>useState</code>:</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>useEffect<span class="token punctuation">,</span> useState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>  
  
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
  
  <span class="token comment">// 组件初始化的过程中会执行一次useEffect</span>
  <span class="token comment">// 在组件每次渲染完成后也会执行一次</span>
    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Component re-rendered&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token keyword">const</span> <span class="token punctuation">[</span>isBlue<span class="token punctuation">,</span> setIsBlue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token keyword">const</span> <span class="token function-variable function">toggleColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  
        <span class="token function">setIsBlue</span><span class="token punctuation">(</span><span class="token operator">!</span>isBlue<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span><span class="token punctuation">;</span>  

    <span class="token keyword">return</span> <span class="token punctuation">(</span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>toggleColor<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">切换颜色</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  
                <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>  
                <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">&#39;200px&#39;</span><span class="token punctuation">,</span>  
                <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token string">&#39;200px&#39;</span><span class="token punctuation">,</span>  
                <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> isBlue <span class="token operator">?</span> <span class="token string">&#39;lightblue&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;white&#39;</span>  
                <span class="token punctuation">}</span><span class="token punctuation">}</span></span>  
            <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  
    <span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器响应效果及控制台展示：</p><p><img src="http://eddiehuang.oss-cn-guangzhou.aliyuncs.com/images/useref3.gif" alt="useref3"></p><p>使用<code>useRef</code>:</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>useEffect<span class="token punctuation">,</span> useRef<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>  
  
<span class="token comment">// App 组件  </span>
<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  

    <span class="token comment">// 组件初始化的过程中会执行一次useEffect</span>
    <span class="token comment">// 在组件每次渲染完成后也会执行一次</span>
    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Component re-rendered&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token keyword">const</span> divRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token keyword">const</span> <span class="token function-variable function">changeColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  
        divRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> divRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">===</span> <span class="token string">&#39;lightblue&#39;</span><span class="token operator">?</span><span class="token string">&#39;white&#39;</span><span class="token operator">:</span><span class="token string">&#39;lightblue&#39;</span>  
    <span class="token punctuation">}</span><span class="token punctuation">;</span>  

    <span class="token keyword">return</span> <span class="token punctuation">(</span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>changeColor<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">改变背景颜色</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  
                <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>divRef<span class="token punctuation">}</span></span>  
                <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>  
                <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">&#39;200px&#39;</span><span class="token punctuation">,</span>  
                <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token string">&#39;200px&#39;</span><span class="token punctuation">,</span>  
                <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">&#39;lightblue&#39;</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">}</span></span>  
            <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  
    <span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
  
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器响应效果及控制台展示：</p><p><img src="http://eddiehuang.oss-cn-guangzhou.aliyuncs.com/images/useref4.gif" alt="useref4"></p><p>通过对比可以看出，使用<code>useRef</code>钩子函数对<code>DOM</code>样式进行修改不会触发组件的重新渲染，而每一次调用<code>useState</code>修改状态都会触发组件的重新渲染。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>通过本次的学习，相信大家对<code>useRef</code>钩子函数的定义与使用都有了一定的了解。此外，通过对比我们也可以更加明确不同钩子函数的使用场景。由于过多地使用 <code>useState</code> 可能会导致频繁的组件重新渲染，从而影响性能。所以在遇到需要操作<code>DOM</code>的业务场景时，我们经常可以使用<code>useRef</code>快速解决问题。同时我们也需要利用<code>useRef</code>的特性帮助我们存储持久性数据以及维护引用的稳定性。</p>`,33),k={href:"https://juejin.cn/post/7271053133886488630",target:"_blank",rel:"noopener noreferrer"};function d(r,v){const a=p("ExternalLinkIcon");return e(),c("div",null,[u,s("p",null,[n("[第一篇]("),s("a",k,[n("盘点React常用Hooks（1）—— useState、useEffect | 青训营 - 掘金 (juejin.cn)"),o(a)]),n(")")])])}const m=t(i,[["render",d],["__file","2.html.vue"]]);export{m as default};
