import{_ as e,r as t,o as p,c as o,a as s,b as n,d as c,e as l}from"./app-ca4cd4ff.js";const i={},u=l(`<h1 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h1><p><code>TypeScript</code> 是一种由微软开发的开源编程语言，它在 <code>JavaScript</code> 的基础上添加了静态类型系统，使得代码能够更具可维护性、可读性和安全性。在 <code>TS</code> 中，类和泛型是非常强大的特性，能够在项目开发中提供灵活性和安全性。本篇博客将探讨 <code>TS</code> 中泛型的使用方法和场景，并介绍如何使用类型约束来增加代码的灵活性和安全性。</p><h2 id="类和泛型基础" tabindex="-1"><a class="header-anchor" href="#类和泛型基础" aria-hidden="true">#</a> 类和泛型基础</h2><h3 id="_1、类的概念" tabindex="-1"><a class="header-anchor" href="#_1、类的概念" aria-hidden="true">#</a> 1、类的概念</h3><p>在 <code>TS</code> 中，<strong>类</strong>是一种面向对象的编程概念，与<code>C++</code>、<code>JAVA</code>等面向对象的编程语言相同，<code>TS</code>和<code>JS</code>允许开发者将属性和方法组合在一起，形成一个具有一定功能的对象。在 <code>TS</code> 中，您可以像如下一样轻松地创建和使用类：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 定义一个类 Container，不使用泛型</span>
<span class="token keyword">class</span> <span class="token class-name">Container</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span> <span class="token comment">// 类内部私有属性，存储值，此处使用 any 表示可以是任何类型</span>

    <span class="token comment">// 构造函数，接收初始值并将其赋给私有属性</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>initialValue<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> initialValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 方法：获取存储的值</span>
    <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建一个数字类型的 Container 实例</span>
<span class="token keyword">const</span> numberContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numberContainer<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 42</span>

<span class="token comment">// 创建一个字符串类型的 Container 实例</span>
<span class="token keyword">const</span> stringContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, TypeScript&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringContainer<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Hello, TypeScript</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段代码中，我们定义了一个名为 <code>Container</code> 的类，没有使用泛型。类内部有一个私有属性 <code>value</code> 用于存储值，此处我们使用 <code>any</code> 类型表示可以是任何类型的值。构造函数接收初始值，并将其赋给私有属性。<code>getValue</code> 方法用于获取存储的值。</p><p>随后，我们创建了两个 <code>Container</code> 实例，一个存储数字类型的值 <code>42</code>，另一个存储字符串类型的值 <code>&quot;Hello, TypeScript&quot;</code>。通过调用实例的 <code>getValue</code> 方法，我们可以分别获取并打印出存储的值。</p><h3 id="_2、泛型的概念" tabindex="-1"><a class="header-anchor" href="#_2、泛型的概念" aria-hidden="true">#</a> 2、泛型的概念</h3><p><strong>泛型</strong>是一种可以在类、函数和接口中使用的类型参数，它可以在使用的时候指定具体的类型。以下是使用泛型重构后类的声明：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 定义一个通用的类 Container，使用泛型 T 表示类型参数</span>
<span class="token keyword">class</span> <span class="token class-name">Container<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span> <span class="token comment">// 类内部私有属性，存储泛型类型的值</span>

    <span class="token comment">// 构造函数，接收初始值并将其赋给私有属性</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>initialValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> initialValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 方法：获取存储的泛型值</span>
    <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建一个数字类型的 Container 实例</span>
<span class="token keyword">const</span> numberContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numberContainer<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 42</span>

<span class="token comment">// 创建一个字符串类型的 Container 实例</span>
<span class="token keyword">const</span> stringContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;Hello, TypeScript&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringContainer<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Hello, TypeScript</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们同样定义了一个名为 <code>Container</code> 的通用类，不同之处在于这次我们使用了泛型类型参数 <code>T</code> 表示其中的数据类型。该类有一个私有属性 <code>value</code>，用于存储传入的泛型类型的值。构造函数接收一个初始值并将其赋给私有属性。</p><p>通过 <code>getValue</code> 方法，我们可以获取存储在容器中的泛型值。在代码末尾，我们展示了如何创建一个存储数字和字符串的 <code>Container</code> 实例，并通过 <code>getValue</code> 方法分别获取和输出存储的值。</p><p>通过这个示例，我们可以体悟到泛型的核心思想：创建通用的类、函数或接口，使其可以适用于多种不同类型的数据，从而提高<strong>代码的重用性</strong>和<strong>类型安全性</strong>。</p><h2 id="泛型的使用场景" tabindex="-1"><a class="header-anchor" href="#泛型的使用场景" aria-hidden="true">#</a> 泛型的使用场景</h2><p>使用泛型后的优势在于代码的灵活性、类型安全性和重用性。让我们通过对比来更清楚地理解这些优势。</p><h3 id="_1-灵活性" tabindex="-1"><a class="header-anchor" href="#_1-灵活性" aria-hidden="true">#</a> 1. 灵活性</h3><p><strong>不使用泛型的情况：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Container</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span>initialValue<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> initialValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们使用了 <code>any</code> 类型来存储值，这意味着我们可以存储任何类型的数据。然而，这种灵活性带来了潜在的问题，因为我们无法在编译时就捕获类型错误。</p><p><strong>使用泛型的情况：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Container<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span>initialValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> initialValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用泛型，我们可以在类中指定存储的具体类型。这样一来，在创建实例时就能确定存储的类型，在保持代码灵活性的基础上提供了更好的编译时类型检查，避免了潜在的运行时类型错误。</p><h3 id="_2-类型安全性" tabindex="-1"><a class="header-anchor" href="#_2-类型安全性" aria-hidden="true">#</a> 2. 类型安全性</h3><p><strong>不使用泛型的情况：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> numberContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> stringValue <span class="token operator">=</span> numberContainer<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在编译时没有错误，但是运行时可能出错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们将一个数字类型的值存储在 <code>Container</code> 实例中，然后尝试将存储的值赋给一个变量。虽然在编译时没有错误，但实际上 <code>stringValue</code> 变量可能会包含不是字符串的数据，这可能导致运行时错误。</p><p><strong>使用泛型的情况：</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> numberContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> stringValue <span class="token operator">=</span> numberContainer<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 编译时报错：不能将类型 &#39;number&#39; 分配给类型 &#39;string&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用泛型，我们在编译时就能捕获潜在的类型错误。在上述代码中，由于我们在创建实例时指定了存储的类型为 <code>number</code>，所以在尝试将存储的值赋给 <code>stringValue</code> 变量时会立即报错。</p><h3 id="_3-重用性" tabindex="-1"><a class="header-anchor" href="#_3-重用性" aria-hidden="true">#</a> 3. 重用性</h3><p>使用泛型还能大幅增强代码的重用性，让相同的逻辑能够适用于不同的数据类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Queue<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> items<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">enqueue</span><span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> numberQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
numberQueue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
numberQueue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> stringQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stringQueue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stringQueue<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，<code>Queue</code> 类定义了一个通用的队列，可以适用于不同类型的数据。我们创建了一个存储数字的队列和一个存储字符串的队列，它们使用相同的逻辑来管理不同类型的数据。</p><p>总之，使用泛型可以带来更大的灵活性、类型安全性和重用性，从而提高代码质量、可维护性和开发效率。</p><h2 id="类型约束的实践" tabindex="-1"><a class="header-anchor" href="#类型约束的实践" aria-hidden="true">#</a> 类型约束的实践</h2><p>类型约束在实际项目中的应用是非常有价值的，它能够在编译阶段捕获潜在的问题，从而避免在运行时出现错误。让我们通过一个例子来更好地理解在何种情况下使用类型约束可以提高代码的安全性和可靠性。</p><p>假设我们要编写一个函数，用于计算数组中所有数字的平均值。然而，我们希望函数仅处理数字类型的数组，以防止不正确的数据类型导致计算错误。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 使用类型约束来计算数字数组的平均值</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">calculateAverage</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>numbers<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> sum <span class="token operator">/</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 正确的数字数组</span>
<span class="token keyword">const</span> validNumberArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> averageValid <span class="token operator">=</span> <span class="token function">calculateAverage</span><span class="token punctuation">(</span>validNumberArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">平均值: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>averageValid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 平均值: 3</span>

<span class="token comment">// 错误的数组，包含非数字元素</span>
<span class="token keyword">const</span> invalidNumberArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> averageInvalid <span class="token operator">=</span> <span class="token function">calculateAverage</span><span class="token punctuation">(</span>invalidNumberArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 编译时报错：类型“string”的参数不能赋给类型“number”的参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们定义了一个函数 <code>calculateAverage</code>，它接收一个类型参数 <code>T</code>，该参数被约束为一个数字数组类型（<code>number[]</code>）。这意味着只有传入数字数组，才能调用这个函数。</p><p>函数内部，我们使用数组的 <code>reduce</code> 方法计算数字的总和，然后除以数组长度得到平均值。因为我们对输入参数进行了类型约束，所以我们可以放心地执行这些操作，不必担心输入数据的类型错误。</p><p>接下来，我们创建一个数字数组 <code>numberArray</code>，并调用 <code>calculateAverage</code> 函数来计算平均值。由于输入的是数字数组，所以函数会正常工作并返回正确的结果。</p><p>通过这个例子，我们可以看到类型约束如何在编译时捕获潜在错误，使我们能够在运行代码之前就避免类型相关的问题。类型约束不仅可以用于基本类型，还可以用于接口、类等复杂数据结构，为我们的代码添加更多的可靠性和安全性。</p><h2 id="提升代码质量-编译时报错-vs-运行时报错" tabindex="-1"><a class="header-anchor" href="#提升代码质量-编译时报错-vs-运行时报错" aria-hidden="true">#</a> 提升代码质量：编译时报错 vs. 运行时报错</h2><p>通过上面的介绍相信大家基本上应该能够理解<code>TS</code>泛型的原理及对应的编译时报错，但有些同学可能还是会提出疑问，<strong>编译时报错和运行时报错有什么区别吗？该错不还是得错？</strong>。</p><p>编写稳定可靠的代码是每位开发者的目标，但错误在编码过程中是不可避免的。为了提高代码的质量，开发者们采用各种策略，而其中之一就是利用编译时报错的优势。接下来就让我们继续探讨一下编译时报错与运行时报错之间的区别，以及为何通过在编译时捕获错误可以明显改善代码质量。</p><h3 id="编译时报错" tabindex="-1"><a class="header-anchor" href="#编译时报错" aria-hidden="true">#</a> 编译时报错</h3><p>编译时报错是在<strong>代码被编译成可执行程序之前</strong>，由编译器检测到的错误。编译器会分析代码的结构、类型和语法，以确保代码符合语言规范。如果存在拼写错误、类型不匹配或其他语法问题，编译器会发出错误警告，阻止代码编译成可执行程序。</p><p>编译时报错的优势在于，它们在代码运行之前就能够捕获问题，从而减少在运行时可能遇到的错误。通过修复编译时错误，您可以<strong>确保代码的基本结构和逻辑是正确的</strong>。</p><h3 id="运行时报错" tabindex="-1"><a class="header-anchor" href="#运行时报错" aria-hidden="true">#</a> 运行时报错</h3><p>运行时报错发生在<strong>程序已经编译成功并开始运行时</strong>。这些错误通常由于程序在运行时遇到无法处理的情况，例如除以零、空指针引用、类型转换错误等。运行时报错可能导致程序异常终止或产生意外行为，进而导致程序崩溃。</p><p>尽管在运行时报错后，您可以检查错误信息以确定问题所在，但此时<strong>已无法避免错误的发生，程序流程已受到干扰</strong>。</p><h3 id="改进代码质量" tabindex="-1"><a class="header-anchor" href="#改进代码质量" aria-hidden="true">#</a> 改进代码质量</h3><p>编译时报错和运行时报错的区别在于发生时间和影响范围。编译时报错<strong>在代码编写阶段就能够发现问题</strong>，而运行时报错则<strong>发生在程序运行时</strong>。</p><p>改进代码质量的过程确实包括修复错误，但通过在编译时解决问题，您可以避免在运行时遇到明显的错误，提高代码的质量、可维护性和可靠性。编译器的错误信息通常会提供有关问题的详细信息，有助于<strong>更快地定位和修复问题</strong>。</p><p>在构建稳健的应用程序时，合理地利用编译时报错，可以大大提高代码的质量，从而<strong>为用户提供更好的体验和可靠性</strong>。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>`,57),r=s("code",null,"TS",-1),d=s("strong",null,"类",-1),k=s("strong",null,"泛型",-1),v=s("strong",null,"代码的复用性",-1),m=s("strong",null,"代码的灵活性",-1),b=s("strong",null,"安全性",-1),g=s("code",null,"TS",-1),h=s("code",null,"TS",-1),y={href:"https://juejin.cn/post/7018805943710253086?searchId=20230819163540782DFB99C1FA105A8AE8#heading-10",target:"_blank",rel:"noopener noreferrer"};function w(f,_){const a=t("ExternalLinkIcon");return p(),o("div",null,[u,s("p",null,[n("通过本文的学习，相信您已经初步了解了 "),r,n(" 中"),d,n("和"),k,n("的基本概念，以及它们在实际项目中的应用场景。泛型不仅能够增加"),v,n("，还能通过类型约束提升"),m,n("和"),b,n("。在实际开发中，合理运用泛型和类型约束将为您的项目带来更多的好处。随着前端工程化的进展，"),g,n("逐渐成为了开发必备的知识，为了更深层次地理解"),h,n("的数据类型及应用，[推荐]("),s("a",y,[n("typescript史上最强学习入门文章(2w字) - 掘金 (juejin.cn)"),c(a)]),n(")这篇文章，有兴趣的同学建议可以反复阅读，多多实践。")])])}const T=e(i,[["render",w],["__file","1.html.vue"]]);export{T as default};
