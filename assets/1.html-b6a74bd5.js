import{_ as n,o as s,c as a,e as t}from"./app-ca4cd4ff.js";const e={},p=t(`<h1 id="性能优化与调试技巧" tabindex="-1"><a class="header-anchor" href="#性能优化与调试技巧" aria-hidden="true">#</a> 性能优化与调试技巧</h1><p>在学习完前端三件套 <strong>js、html、css</strong> 后，我们已经可以搭建一些基础的页面了。但是大家是否考虑过代码的性能呢，我相信对于大多数初学者（包括我）来说，很少会去考虑性能的问题，毕竟页面都跑不动谁还有时间去考虑性能呢（说多了都是泪）。</p><p>但是，当我们已经实现了基础的功能，就需要注重性能的优化了，毕竟前端最重要的就是要优化用户体验，而这时候就涉及到了本次文章的内容，如何优化 <code>JavaScript</code> 代码以提高性能。本次介绍了一些常用的技巧，涵盖了减少重绘和重排、使用节流和防抖技术，以及使用性能分析工具来帮助你优化代码性能。</p><h2 id="减少重绘和重排" tabindex="-1"><a class="header-anchor" href="#减少重绘和重排" aria-hidden="true">#</a> 减少重绘和重排</h2><h3 id="避免频繁修改样式属性" tabindex="-1"><a class="header-anchor" href="#避免频繁修改样式属性" aria-hidden="true">#</a> 避免频繁修改样式属性</h3><p>在短时间内频繁修改元素的样式属性会引发浏览器的重排和重绘。尽量使用 <code>CSS</code> 类来一次性修改多个属性，以减少重排的次数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 避免频繁修改样式属性 </span>
<span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myElement&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">&quot;100px&quot;</span><span class="token punctuation">;</span>
element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">&quot;200px&quot;</span><span class="token punctuation">;</span>
element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码会在短时间内多次修改 <code>element</code> 的样式属性。如果这样的修改在一个事件处理程序中被重复触发，例如在 <code>resize</code> 或 <code>scroll</code> 事件中，就会导致多次的重排和重绘，从而影响页面性能。</p><p>为了避免这种情况，通常推荐将样式的修改集中到一起，以减少重排的次数。例如，你可以使用一个 CSS 类来一次性地修改多个样式属性，然后将这个类应用到元素上：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myElement&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
element<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;modified-style&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 CSS 中定义这个类的样式：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.modified-style</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这种方式，你可以减少浏览器执行重排和重绘的次数，提高页面的性能。这个优化技巧同样适用于其他需要多次修改样式的情况，例如循环中的 <code>DOM</code> 操作等。</p><h3 id="使用-css-动画" tabindex="-1"><a class="header-anchor" href="#使用-css-动画" aria-hidden="true">#</a> 使用 CSS 动画</h3><p>在前端页面的设计中我们经常需要添加一些动画效果以提高用户体验，这时建议使用 <code>CSS</code> 过渡和动画而不是 <code>JavaScript</code> 来创建动画效果，因为浏览器可以优化 <code>CSS</code> 动画，避免不必要的重排和重绘。</p><p><code>CSS</code> 过渡和动画通常在一些属性（如位置、尺寸、透明度等）的变化上非常有效，因为浏览器可以根据 <code>CSS</code> 规则进行优化，将动画的渲染过程与浏览器的帧刷新同步。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myElement&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在某个事件触发时，添加类来触发动画</span>
element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  element<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;animate-slide&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;active&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当点击元素后，<code>active</code> 类会被添加到元素上，触发 <code>transform</code> 属性的变化。<code>transition</code> 属性指定了过渡效果的时间、缓动函数等信息。由于这种使用 <code>CSS</code> 动画的方式，浏览器会自动处理动画的渲染，从而提高性能和流畅度。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.animate-slide</span> <span class="token punctuation">{</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> transform 0.3s ease-in-out<span class="token punctuation">;</span> <span class="token comment">/* 添加过渡效果 */</span>
<span class="token punctuation">}</span>

<span class="token selector">.animate-slide.active</span> <span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>100px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 运用过渡效果的属性变化 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总之，使用 <code>CSS</code> 过渡和动画可以充分利用浏览器的优化机制，创建更加流畅的动画效果，同时避免了不必要的 <code>JavaScript</code> 操作和可能引发的性能问题。</p><h3 id="批量操作-dom" tabindex="-1"><a class="header-anchor" href="#批量操作-dom" aria-hidden="true">#</a> 批量操作 DOM</h3><p>在 <code>JavaScript</code> 中，频繁地操作 <code>DOM</code> 会导致重排，从而影响性能。最好将多个 <code>DOM</code> 操作合并为一个批量操作，或者使用 <code>DocumentFragment</code> 来一次性插入多个元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 批量操作 DOM </span>
<span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;container&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    div<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">&quot;Item &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">;</span> 
    fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过一次性插入 <code>fragment</code> 到容器中，避免了在循环内频繁修改容器的 <code>DOM</code> ，从而提高了性能。这种技术在需要批量插入大量元素时特别有用，比如在动态生成列表或表格时。通过合并多个操作，可以显著减少浏览器的重排次数，提高页面的响应性。</p><h2 id="使用节流和防抖技术" tabindex="-1"><a class="header-anchor" href="#使用节流和防抖技术" aria-hidden="true">#</a> 使用节流和防抖技术</h2><p>在日常的网页使用过程中，用户有时候会在短时间频繁触发同一个事件，比如窗口调整或输入框检测，而实际上这些操作可能只需要在短时间内执行一次或者可以等待用户操作结束再执行，这时候我们该如何避免重复无效的触发呢？</p><h3 id="节流-throttling" tabindex="-1"><a class="header-anchor" href="#节流-throttling" aria-hidden="true">#</a> 节流（Throttling）</h3><p>节流是一种限制函数执行频率的技术，确保在一段时间内函数只执行一次。适用于需要限制频繁触发的事件，如滚动、窗口调整等。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 节流</span>
<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> isThrottled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isThrottled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
      isThrottled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        isThrottled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个节流函数的基本思想是，在函数被调用后，将一个标志位 <code>isThrottled</code> 设置为 <code>true</code>，然后使用 <code>setTimeout</code> 在一定时间后将这个标志位重新设置为 <code>false</code>，从而允许下一次函数调用。</p><p>我们可以通过将需要进行节流的函数作为参数传递给 <code>throttle</code> 函数，从而创建一个节流后的版本。例如，在滚动事件上使用节流：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> throttledScroll <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Scroll event throttled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;scroll&quot;</span><span class="token punctuation">,</span> throttledScroll<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>throttledScroll</code> 就是经过节流处理后的滚动事件处理函数，它会确保滚动事件在每1000毫秒内只执行一次，避免频繁触发。</p><h3 id="防抖-debouncing" tabindex="-1"><a class="header-anchor" href="#防抖-debouncing" aria-hidden="true">#</a> 防抖（Debouncing）</h3><p>防抖是一种延迟函数执行的技术，确保在一系列连续触发后只执行一次函数。适用于输入框搜索等需要等待用户输入完成后才执行的情况。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 防抖</span>
<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timeout<span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在每次触发函数时，清除之前的延迟调用（如果有的话），然后使用 <code>setTimeout</code> 来延迟函数的执行。如果在延迟期间再次触发了函数，会重新设置延迟，直到一定时间内没有触发，函数才会执行。</p><p>例如，你可以在输入框中使用防抖来实现搜索功能，确保用户输入完毕后再执行搜索：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> debounceSearch <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">query</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Searching for:&quot;</span><span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> inputElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;searchInput&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
inputElement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> query <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token function">debounceSearch</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>debounceSearch</code> 是经过防抖处理的搜索函数，它会在用户输入停止后的300毫秒内执行搜索操作，避免了频繁的搜索请求。</p><h2 id="代码优化" tabindex="-1"><a class="header-anchor" href="#代码优化" aria-hidden="true">#</a> 代码优化</h2><h3 id="使用原生方法" tabindex="-1"><a class="header-anchor" href="#使用原生方法" aria-hidden="true">#</a> 使用原生方法</h3><p>虽然我们在遇到一些比较复杂的问题经常可以通过引入库和框架进行解决，但是原生 <code>JavaScript</code> 方法通常比库和框架提供的方法更高效。例如，使用原生的 <code>DOM</code> 操作方法，或者使用原生的循环语句代替库提供的迭代方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用原生方法</span>
<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sum <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> total <span class="token operator">+</span> num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里使用的是 <code>reduce</code> 方法，它是 JavaScript 数组的一个原生方法，用于对数组中的元素进行累积操作。通过使用原生方法，你可以避免引入外部库，从而减少了代码的复杂性和性能开销。</p><p>类似地，你可以使用其他原生方法来操作数组、字符串、对象等，以达到更高效的代码执行。原生方法通常受到浏览器的优化，因此在大多数情况下，它们比库和框架提供的方法更具性能优势。</p><h3 id="减少重复代码" tabindex="-1"><a class="header-anchor" href="#减少重复代码" aria-hidden="true">#</a> 减少重复代码</h3><p>重复的代码不仅难以维护，还会增加文件大小。尽量将重复的逻辑抽象为函数或模块。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 避免不必要的计算</span>
<span class="token keyword">function</span> <span class="token function">calculateTotal</span><span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    total <span class="token operator">+=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 避免在循环内部重复访问 items[i].value</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> total<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>calculateTotal</code> 函数把计算总和的逻辑封装在一个函数中，避免了在循环内部重复计算 <code>items[i].value</code>。通过这种方式，不仅减少了代码的重复，还提高了代码的可读性和维护性。</p><p>减少重复代码还包括将相似的代码块抽象为函数、类、模块等，从而可以在多个地方复用这些逻辑，减少错误和改进代码的整体质量。这也有助于保持代码的一致性，减少对代码的维护工作。</p><h3 id="懒加载" tabindex="-1"><a class="header-anchor" href="#懒加载" aria-hidden="true">#</a> 懒加载</h3><p>对于大型页面或图片，使用懒加载技术来延迟加载不可见部分的内容，减少初始加载时间。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 懒加载图片</span>
<span class="token keyword">const</span> lazyImages <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;.lazy-image&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">lazyLoad</span> <span class="token operator">=</span> <span class="token parameter">target</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> io <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> img <span class="token operator">=</span> entry<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
        <span class="token keyword">const</span> src <span class="token operator">=</span> img<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;data-src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        img<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>
        observer<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  io<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

lazyImages<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>lazyLoad<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，每个具有 <code>.lazy-image</code> 类的图片元素都会被添加到 Intersection Observer 中进行观察。当图片进入视口（即可见）时，<code>entry.isIntersecting</code> 为 <code>true</code>，然后你可以从 <code>data-src</code> 属性中获取实际图片的 URL，将其设置为 <code>src</code> 属性，从而触发图片加载。</p><p>通过这种方式，只有当图片进入可见区域时才会加载，从而减少初始页面加载时间，特别对于需要滚动才能看到的内容非常有效。这有助于提高页面的性能和加载速度。</p><h3 id="优化图片和资源" tabindex="-1"><a class="header-anchor" href="#优化图片和资源" aria-hidden="true">#</a> 优化图片和资源</h3><p>使用适当的图片格式、压缩和缓存，以及使用 <code>CSS Sprite</code>、字体图标等来减少网络请求和提高加载速度。</p><p><strong>1. 使用适当的图片格式：</strong> 根据图片的内容选择适当的图片格式，如 JPEG、PNG、WebP 等。JPEG 适合照片等内容，PNG 适合透明图像，而 WebP 是一种现代格式，通常可以提供更好的压缩效率和质量。</p><p><strong>2. 图片压缩：</strong> 使用图片压缩工具来减小图片文件的大小，以减少下载时间。保持图片在合适的质量范围内，避免不必要的高分辨率。</p><p><strong>3. 图片缓存：</strong> 使用浏览器缓存来存储图片，使用户在再次访问页面时不必重新下载相同的图片资源。通过设置适当的缓存策略，可以减少网络请求，提高加载速度。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 在&lt;head&gt;标签中添加以下meta标签 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Cache-Control<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>max-age=3600<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- 缓存资源1小时 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. CSS Sprite：</strong> 将多个小图标或图片合并成一张大图，然后通过调整背景位置来显示不同的图标。这可以减少请求次数，提高加载效率。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sprite icon-facebook<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sprite icon-twitter<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.sprite</span> <span class="token punctuation">{</span>
  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;icons.png&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
  <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.icon-facebook</span> <span class="token punctuation">{</span>
  <span class="token property">background-position</span><span class="token punctuation">:</span> 0 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.icon-twitter</span> <span class="token punctuation">{</span>
  <span class="token property">background-position</span><span class="token punctuation">:</span> -20px 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5. 字体图标：</strong> 使用字体图标代替图片图标，因为字体图标可以使用 CSS 控制大小和颜色，并且通常比图片图标更小，从而减少下载时间。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fa fa-camera<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 使用 Font Awesome 字体图标 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>6. 响应式图片：</strong> 使用 <code>srcset</code> 属性和 <code>sizes</code> 属性来为不同的屏幕大小提供不同尺寸的图片，以确保在不同设备上显示合适的图像。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image-small.jpg 320w, image-medium.jpg 640w, image-large.jpg 1024w<span class="token punctuation">&quot;</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(max-width: 640px) 320px, (max-width: 1024px) 640px, 1024px<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>An image<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>7. 使用 CDN：</strong> 使用内容分发网络（CDN）来提供资源，它可以加速资源的传送，减少用户与服务器之间的延迟。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.example.com/script.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.example.com/styles.css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上这些优化方法都有助于提高网站的加载速度，减少用户等待时间，并改善用户体验。在设计和开发过程中，合理使用这些优化方法可以使网站更加高效和可靠。</p><h2 id="使用性能分析工具" tabindex="-1"><a class="header-anchor" href="#使用性能分析工具" aria-hidden="true">#</a> 使用性能分析工具</h2><p>有些朋友可能会问，做了这么多性能优化，但有时候真的没有感到明显的变化，这时可以使用性能分析工具，实时地对我们的代码性能进行分析，同时有些开源的工具也可以帮我们分析出代码的性能问题，使我们能够更有针对性地进行代码优化。</p><ul><li><strong>浏览器开发者工具：</strong> 浏览器的开发者工具（如 <code>Chrome DevTools</code>）提供了性能分析功能，可以帮助你分析页面的渲染性能，检测重排和重绘，以及查看 <code>CPU</code> 和内存使用情况。</li></ul><p><img src="http://eddiehuang.oss-cn-guangzhou.aliyuncs.com/images/chromedevtool.png" alt="chromedevtool"></p><ul><li><strong>Lighthouse：</strong> <code>Lighthouse</code> 是一个开源工具，可以对网页进行自动化的性能和质量审查，帮助你找出优化的机会。</li></ul><p>安装 <code>Chrome</code> 扩展程序：</p><p>![lighthouse install](http://eddiehuang.oss-cn-guangzhou.aliyuncs.com/images/lighthouse install.png)</p><p>在浏览器使用插件：</p><p>![lighthouse use](http://eddiehuang.oss-cn-guangzhou.aliyuncs.com/images/lighthouse use.png)</p><p>查看评分结果：</p><p><img src="http://eddiehuang.oss-cn-guangzhou.aliyuncs.com/images/lighthouse.png" alt="lighthouse"></p><ul><li><strong>WebPageTest：</strong> <code>WebPageTest</code> 允许你在真实浏览器上运行性能测试，提供详细的性能数据和建议。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在我们实现了基本的业务需求后，如果还想进一步地提高性能进而提升用户体验，就需要想办法优化自己代码，让代码变得更加优雅。但优化时也需要细心考虑和测试，以确保在提升性能的同时不引入新问题。借助开发者工具和性能分析工具可以引导我们的优化工作。同时，使用适当的技术和策略，可以减少页面的重绘和重排，适当地应用节流和防抖技术，优化代码逻辑和资源加载。这些都有助于我们创造更出色的用户体验。</p>`,86),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","1.html.vue"]]);export{r as default};
