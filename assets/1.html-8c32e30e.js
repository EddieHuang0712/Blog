import{_ as t,r as p,o as e,c as o,a as s,b as n,d as c,e as u}from"./app-ca4cd4ff.js";const i={},l=u(`<h1 id="react-hooks" tabindex="-1"><a class="header-anchor" href="#react-hooks" aria-hidden="true">#</a> React Hooks</h1><p>在现代的<code>React</code>开发中，函数组件已经成为了构建用户界面的主要方式。为了更好地管理组件状态和副作用<code>React</code>引入了<code>Hooks</code>，它们能够让你在函数组件中使用状态和其他<code>React</code>特性。本文将介绍一些常用的<code>React Hooks</code>，帮助你优化你的函数组件代码。</p><h2 id="_1-usestate-状态管理" tabindex="-1"><a class="header-anchor" href="#_1-usestate-状态管理" aria-hidden="true">#</a> 1. useState - 状态管理</h2><h3 id="函数定义" tabindex="-1"><a class="header-anchor" href="#函数定义" aria-hidden="true">#</a> 函数定义</h3><p><code>useState</code> 用于在函数组件中引入状态，通过调用 <code>useState(initialValue)</code>返回一个包含状态变量和更新状态的函数的数组。这个函数组合使得在函数组件中保存和更新状态变得非常方便。</p><p><code>useState</code> 函数返回数组包含两个参数：</p><ul><li><strong><code>state</code></strong>：这是一个变量，代表当前的状态。它会保存着组件的当前状态值，并在组件渲染时显示这个值。</li><li><strong><code>setState</code></strong>：这是一个函数，用于更新状态。通过调用这个函数，你可以更新 <code>state</code> 的值，并触发组件的重新渲染。</li></ul><h3 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例" aria-hidden="true">#</a> 使用示例</h3><p>以下是如何使用 <code>useState</code> 来声明和管理状态的示例：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 使用 useState 声明一个名为 count 的状态变量，初始值为 0</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// setCount 是一个函数，调用它可以更新 count 的值</span>
  <span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Count: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>increment<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">增加</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器实时响应效果展示：</p><p><img src="http://eddiehuang.oss-cn-guangzhou.aliyuncs.com/images/useState.gif" alt="useState"></p><p>在上面的示例中，<code>useState(0)</code> 表示初始状态为 0，返回的数组的第一个元素 <code>count</code> 是当前状态的值，第二个元素 <code>setCount</code> 是一个用于更新状态的函数。通过调用 <code>setCount</code> 函数，你可以更新 <code>count</code> 的值。在函数式更新的情况下，你还可以传递一个函数，以便基于先前的状态进行更新，避免出现因异步更新而导致的问题。</p><p>请注意，每个 <code>useState</code> 调用都会创建一个独立的状态变量，它与特定的组件实例关联。所以你可以在组件中多次使用它来管理不同的状态。</p><h3 id="与普通变量声明的区别" tabindex="-1"><a class="header-anchor" href="#与普通变量声明的区别" aria-hidden="true">#</a> 与普通变量声明的区别</h3><p>一些初学者（比如苯人）最开始一直不能理解<code>useState</code> 和普通变量声明的区别，感觉使用这个<code>Hook</code>好像没有什么必要。实际上它们在<code>React</code>函数组件中的使用还是很不同的，主要是因为 <code>useState</code> 是用来管理组件状态的特殊<code>Hook</code>。下面是它们之间的一些主要区别：</p><ul><li><p><strong>触发重新渲染：</strong></p><ul><li>当使用<code>useState</code>来声明状态并通过对应的更新函数修改状态时，<code>React</code>会自动识别状态变化，并重新渲染组件，以反映状态的变化。这是<code>useState</code>内部的特性，使得组件状态的更新与重新渲染变得无缝连接。</li><li>在普通变量声明中，即使变量的值发生了变化，<code>React</code>并不会自动触发组件的重新渲染。你需要手动调用<code>setState</code>或其他触发重新渲染的方法来通知 React，让它知道组件需要重新渲染以反映变量的变化。</li></ul></li><li><p><strong>React 的状态更新机制：</strong></p><ul><li>当使用<code>useState</code>声明状态并更新状态时，React 会根据状态的变化，以最优的方式批量更新组件，以提高性能。</li><li>在普通变量声明中，即使更新了多个变量，React 并不会像 <code>useState</code> 那样进行批量更新，可能会导致不必要的性能开销。</li></ul></li></ul><p>总的来说，<code>useState</code>是专门为<code>React</code>函数组件提供的状态管理机制，具有自动触发重新渲染、状态持久性和优化的能力。普通变量声明则更适合于一般的<code>JavaScript</code>逻辑，但在<code>React</code>组件中可能需要更多的手动操作来管理状态和更新。</p><h2 id="_2-useeffect-副作用管理" tabindex="-1"><a class="header-anchor" href="#_2-useeffect-副作用管理" aria-hidden="true">#</a> 2. useEffect - 副作用管理</h2><h3 id="函数定义-1" tabindex="-1"><a class="header-anchor" href="#函数定义-1" aria-hidden="true">#</a> 函数定义</h3><p>当在 React 组件中使用 <code>useEffect</code> 时，你可以传递一个回调函数作为其第一个参数，这个回调函数就被称为 &quot;副作用函数&quot; 或 &quot;effect 函数&quot;。这个 effect 函数在组件渲染后（初始渲染及每次更新渲染）都会被调用。它允许你在组件渲染后执行各种副作用操作，比如数据获取、订阅、DOM 操作等。</p><p><code>useEffect</code> 函数接收两个参数：</p><ol><li><strong>Effect 函数（必需）：</strong> 这是一个包含你要在组件渲染后执行的副作用操作的回调函数。它可以包含异步操作、订阅、状态更新等。</li><li><strong>依赖数组（可选）：</strong> 这是一个数组，包含了在 effect 函数中使用的状态变量。只有当依赖数组中的某个状态变量发生变化时，effect 函数才会重新执行。如果不传递这个数组，effect 会在每次组件更新时都执行。</li></ol><h3 id="使用示例-1" tabindex="-1"><a class="header-anchor" href="#使用示例-1" aria-hidden="true">#</a> 使用示例</h3><p>以下是一个示例，展示了 <code>useEffect</code> 的基本语法和用法：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">DataFetcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 模拟数据获取的异步操作</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> fakeData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Orange&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token function">setData</span><span class="token punctuation">(</span>fakeData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2秒后更新数据</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传递空数组作为第二个参数以触发仅在组件挂载时运行</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">数据获取示例</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>data <span class="token operator">?</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token punctuation">{</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">正在获取数据...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> DataFetcher<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://eddiehuang.oss-cn-guangzhou.aliyuncs.com/images/useEffect.gif" alt="useEffect"></p><h3 id="常见用法" tabindex="-1"><a class="header-anchor" href="#常见用法" aria-hidden="true">#</a> 常见用法</h3><p>除了上述示例中的用法（传递空数组作为第二个参数以触发仅在组件挂载时运行），<code>useEffect</code>还有一些其他的用法，以下是一些<code>useEffect</code>的常见用法示例：</p><ul><li><strong>根据状态变化触发副作用：</strong></li></ul><p>你可以通过在<code>useEffect</code>的依赖数组中传递状态变量，以便在这些状态变量发生变化时触发副作用。<strong>这里的<code>count</code> 是状态变量，而不是普通的 JavaScript 变量。</strong></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Count has changed to: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 在这里可以执行基于状态变化的副作用操作 </span>
    
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当 count 发生变化时触发副作用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以在副作用函数内部执行基于状态变化的操作，比如数据获取、<code>DOM</code>操作、更新其他状态等。当 <code>count</code> 发生变化时，副作用函数就会根据变化的值来执行相应的操作。</p><ul><li><strong>清理副作用：</strong></li></ul><p>你可以在<code>useEffect</code>内部返回一个清理函数，用于在组件卸载或重新渲染之前执行一些清理操作，比如取消订阅、清除定时器等。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> subscription <span class="token operator">=</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在组件卸载或重新渲染之前执行清理操作</span>
    <span class="token function">unsubscribe</span><span class="token punctuation">(</span>subscription<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种模式用于确保在组件生命周期中管理资源的创建和清理，以便在不需要这些资源时释放它们。这有助于<strong>防止内存泄漏</strong>，<strong>提高应用的性能和可维护性</strong>。</p><ul><li><strong>防止过多的副作用：</strong></li></ul><p>如果你的副作用函数内部会订阅事件、注册事件监听器等，可能会导致每次渲染都创建新的订阅。为了避免这种情况，你可以结合上述两种用法，配置<code>useEffect</code>的第二个参数，使得只在特定状态变化时才执行副作用。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> subscription <span class="token operator">=</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">unsubscribe</span><span class="token punctuation">(</span>subscription<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>specificDependency<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>异步副作用：</strong></li></ul><p>如果在副作用函数内部有异步操作，你可以将异步操作封装在函数中，然后在 <code>useEffect</code> 内部调用这个函数。这样可以更好地处理异步操作的错误和取消。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;api/data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>学习完上述的常见用法，这个时候有些同学可能会产生疑问，<strong>组件刚挂载时会不会触发根据状态变化执行的副作用呢？</strong> 答案是“会的”，那如果我们有些业务场景不希望在组件刚挂载时就触发这个副作用，又想根据状态变化触发，该怎么办呢？下面这个示例可以很好地解决我们的疑问：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">ExampleComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>isMounted<span class="token punctuation">,</span> setIsMounted<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Count has changed to: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 在这里执行根据状态变化的副作用操作</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">setIsMounted</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 组件挂载后设置 isMounted 为 true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> isMounted<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Count: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">增加</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> ExampleComponent<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们添加了一个名为 <code>isMounted</code> 的状态变量，用来标识组件是否已经挂载。在 <code>useEffect</code> 中，我们使用了一个条件语句来控制副作用的执行。如果 <code>isMounted</code> 为 <code>true</code>，则执行根据状态变化的副作用操作；如果 <code>isMounted</code> 为 <code>false</code>，则将 <code>isMounted</code> 设置为 <code>true</code>，表示组件已挂载。</p><p>这种模式确保了在组件挂载时不执行副作用，而只在组件挂载后且状态发生变化时才执行副作用。这可以防止在初始渲染时执行可能不必要的操作。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在实际的<code>React</code>开发中，<code>useState</code>和<code>useEffect</code>是最常用也是最重要的<code>Hook</code>。<code>React</code>官方提供的钩子函数还有很多，但个人认为学会了这两个钩子函数，已经可以应对90%的简单业务场景了（随口说的）。其他较常用的<code>Hook</code>将在接下来的文章中展开介绍。</p>`,49),k={href:"https://juejin.cn/post/7271283075170451492",target:"_blank",rel:"noopener noreferrer"};function d(r,v){const a=p("ExternalLinkIcon");return e(),o("div",null,[l,s("p",null,[n("[第二篇]("),s("a",k,[n("盘点React常用Hooks（2）—— useRef | 青训营 - 掘金 (juejin.cn)"),c(a)]),n(")")])])}const g=t(i,[["render",d],["__file","1.html.vue"]]);export{g as default};
